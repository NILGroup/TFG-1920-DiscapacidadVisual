class HttpServices
!!!150274.java!!!	HttpServices()
    	
!!!150402.java!!!	ping() : boolean
    	Socket t = new Socket(host,port);            
        t.close();
        return true;
    	
!!!150530.java!!!	login(in user : String, in password : String) : String
    	if(ping()){
	    	DefaultHttpClient httpclient = new DefaultHttpClient();
	        HttpGet httpget = new HttpGet(urlServer + "consultar.php?username=" + user + "&password=" + password);
		    BasicResponseHandler aux = new BasicResponseHandler();    
		    String response = httpclient.execute(httpget,aux);
		    httpclient.getConnectionManager().shutdown();     
		    if(response.equals("SI")){
		    	return "";
		    }else{
		    	return "Usuario no registrado";
		    }
    	}else{
    		return "Servidor inaccesible";
    	}
	        	        
!!!150658.java!!!	logout(in user : String, in password : String) : String
    	if(ping()){
	    	DefaultHttpClient httpclient = new DefaultHttpClient();
	        HttpGet httpget = new HttpGet(urlServer + "logout.php?username=" + user + "&password=" + password);
		    BasicResponseHandler aux = new BasicResponseHandler();    
		    String response = httpclient.execute(httpget,aux);
		    httpclient.getConnectionManager().shutdown();     
		    if(response.equals("SI")){
		    	return "";
		    }else{
		    	return "No se ha podido salir correctamente de la aplicación";
		    }
    	}else{
    		return "Servidor inaccesible";
    	}
	        	        
!!!150786.java!!!	register(in user : String, in password : String, in name : String, in surname : String) : String
    	if(ping()){
	    	DefaultHttpClient httpclient = new DefaultHttpClient();
	        HttpGet httpget = new HttpGet(urlServer + "registrar.php?username=" + user + "&password=" + password + "&nombre=" + name + "&apellidos="+ surname);
		    BasicResponseHandler aux = new BasicResponseHandler();    
		    String response = httpclient.execute(httpget,aux);
		    httpclient.getConnectionManager().shutdown();     
		    return response;
    	}else{
    		return "Servidor inaccesible";
    	}
!!!150914.java!!!	insertCoorDatabase(in x : double, in y : double, in z : double, in mac : String, in strength : int) : String
    	if(ping()){
	    	DefaultHttpClient httpclient = new DefaultHttpClient();
	    	String url = urlServer + "insertNewPosition.php?mac=" + mac + "&x=" + x + "&y=" + y + "&z="+ z + "&strength=" + strength;
	        HttpGet httpget = new HttpGet(url);
		    BasicResponseHandler aux = new BasicResponseHandler();    
		    String response = httpclient.execute(httpget,aux);
		    httpclient.getConnectionManager().shutdown();
		    if(response.equals("OK")){
		    	return "";
		    }else{
		    	return response;
		    }
    	}else{
    		return "Servidor inaccesible";
    	}
!!!151042.java!!!	getCoordenadas() : JSONArray
    	try {
			if(ping()){
				DefaultHttpClient httpclient = new DefaultHttpClient();
		    	String url =urlServer + "getAllPositions.php";
		        HttpGet httpget = new HttpGet(url);		        
			    BasicResponseHandler aux = new BasicResponseHandler();
			    String response = httpclient.execute(httpget,aux);
			    httpclient.getConnectionManager().shutdown();
			    JSONArray datos = new JSONArray(response);
			    return datos;
			}else{
				throw new HttpServicesException("Host de destino inaccesible.");
			}
		} catch (UnknownHostException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		} catch (SecurityException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		} catch (IOException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		} catch (FactoryConfigurationError e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		} catch (JSONException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		}
!!!151170.java!!!	getFires() : JSONArray
    	try{
    		if (ping()){
    			String url = urlServer + "getAllFires.php";
    			DefaultHttpClient httpClient = new DefaultHttpClient();
    			HttpGet http = new HttpGet(url);
    			BasicResponseHandler handler = new BasicResponseHandler();
    			String response = httpClient.execute(http,handler);
    			httpClient.getConnectionManager().shutdown();
    			JSONArray fuegos = new JSONArray(response);
    			return fuegos;
    		}
    		else{
    			throw new HttpServicesException("Host de destino inaccesible.");
    		}
    	}
    	catch(UnknownHostException e){
    		e.printStackTrace();
    		throw new HttpServicesException(e.getMessage());
    	}
    	catch(SecurityException e){
    		e.printStackTrace();
    		throw new HttpServicesException(e.getMessage());
    	}
    	catch (FactoryConfigurationError e) {
 			e.printStackTrace();
 			throw new HttpServicesException(e.getMessage());
 		}
    	catch (ClientProtocolException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		}
    	catch (IOException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		}
    	catch (JSONException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		}
