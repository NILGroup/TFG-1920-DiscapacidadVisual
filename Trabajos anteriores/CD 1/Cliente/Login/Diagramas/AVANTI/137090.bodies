class ParticleFilter
!!!173186.java!!!	ParticleFilter(in x : long, in y : long, inout context : Context)
		setParticulas(new ArrayList<Particle>());
		Particle p;
		for(int i = 0; i < numParticulas; i++){
			p = new Particle();
			p.setWeight(1/numParticulas);
			p.setX(x);
			p.setY(y);
			p.setVelocityX(0);
			p.setVelocityY(0);
		}
		ImageView img = new ImageView(context);
		img.setImageResource(R.drawable.mapamascara);
		mapaMascara = BitmapFactory.decodeResource(img.getResources(), R.drawable.mapamascara);
!!!173314.java!!!	prediction(in accX : double, in accY : double, in time : double) : void
		double incTime = time - this.time;
		double incTimePow = (Math.pow(incTime, 2))/2;
		Particle p;
		long x_old;
		long y_old;
		for(int i = 0; i < particulas.size(); i++){
			p = particulas.get(i);
			/**
			 * Xk = Xk-1 + At*vx + At2/2*ax
			 */
			x_old = p.getX();
			y_old = p.getY();
			p.setX(Math.round(p.getX() + incTime*p.getVelocityX() + incTimePow*accX));
			p.setY(Math.round(p.getX() + incTime*p.getVelocityY() + incTimePow*accY));
			p.setVelocityX(p.getVelocityX() + incTime*accX);
			p.setVelocityY(p.getVelocityY() + incTime*accY);
			p.setProb_Xk_Xk1(getP_Xk_Xk1(x_old,y_old,p.getX(),p.getY()));
		}
		this.time = time;
!!!173442.java!!!	correction(inout c : Coordenada) : void
		Particle p;
		double probBase =  1 / (Math.sqrt(2*Math.PI)*sigma);
		double exp;
		for(int i = 0; i < particulas.size(); i++){
			p = particulas.get(i);
			exp = (Math.pow(p.getX() - c.getX(),2) + Math.pow(p.getY() - c.getY(), 2))/(2*sigma);
			p.setProb_Zk_Xk(Math.pow(probBase, exp));
		}
!!!173570.java!!!	particleUpdate() : void
		Particle p;
		for(int i = 0; i < particulas.size(); i++){
			p = particulas.get(i);
			p.setWeight(p.getWeight()* p.getProb_Xk_Xk1() * p.getProb_Zk_Xk());
		}
!!!173698.java!!!	resampling() : void
		double sum = 0;
		for(int i = 0; i < particulas.size(); i++){
			sum += Math.pow(particulas.get(i).getWeight(),2);
		}
		sum = 1/sum;
		
		if(sum < 0.5){
			ArrayList<Particle> particulasNuevas = new ArrayList<Particle>();
			quicksort(0,particulas.size()-1);
			int mitad = numParticulas/2;
			Particle p;
			for(int i = 0; i < numParticulas; i++){
				p = particulas.get(i % mitad).clone();
				p.setWeight(1/numParticulas);
				particulasNuevas.add(p);
			}
			if(particulasNuevas.size()<numParticulas){
				p = particulas.get(0).clone();
				p.setWeight(1/numParticulas);
				particulasNuevas.add(p);
			}
			this.particulas = particulasNuevas;
		}
!!!173826.java!!!	quicksort(in primero : int, in ultimo : int) : void
		
    	int i=primero, j=ultimo;
    	//int pivote=vector[(primero+ultimo)/2];
    	double pivote = (particulas.get(primero).getWeight() + particulas.get(ultimo).getWeight())/2; 
    	Particle auxiliar;

    	do{
    		while(particulas.get(i).getWeight()<pivote) i++;    		
    		while(particulas.get(j).getWeight()>pivote) j--;
 
    		if (i <= j){
    			auxiliar = particulas.get(j);
    			particulas.set(j, particulas.get(i));
    			particulas.set(i, auxiliar);
    			i++;
    			j--;
    		}
 
    	} while (i<=j);
 
    	if(primero<j) quicksort(primero, j);
    	if(ultimo>i) quicksort(i, ultimo);

!!!173954.java!!!	getP_Xk_Xk1(in x_old : long, in y_old : long, in x_new : long, in y_new : long) : int
		long incX = Math.abs(x_new - x_old);
		boolean positivoX = x_new >= x_old;
		boolean positivoY = y_new >= y_old;
		long incY = Math.abs(y_new - y_old);
		double rel;
		long xPincel = x_old;
		long yPincel = y_old;
		//double dist_hipotenusa = Math.sqrt(Math.pow(incX,2) + Math.pow(incY, 2));
		double acc = 0;
		boolean flag = false;
		
		if(incX>incY){
			rel = incY/incX;
			while(xPincel!=x_new && yPincel!=y_new && !flag){
				if(xPincel==x_new){
					if(positivoY){
						yPincel = yPincel + 1;
					}else{
						yPincel = yPincel - 1;
					}
				}else{
					if(positivoX) xPincel = xPincel + 1;
					else xPincel = xPincel - 1;
					acc = acc + rel;
					if(acc>=1){
						if(positivoY){
							yPincel = yPincel + 1;
							acc = acc - 1;
						}
						else{
							yPincel = yPincel - 1;
							acc = acc - 1;
						}
					}
				}
				if(mapaMascara.getPixel((int)xPincel, (int)yPincel) != Color.WHITE){
					flag = true;
				}
			}
		}else{
			rel = incX/incY;
			while(xPincel!=x_new && yPincel!=y_new && !flag){
				if(yPincel==y_new){
					if(positivoX){
						xPincel = xPincel + 1;
					}else{
						xPincel = xPincel - 1;
					}
				}else{
					if(positivoY) yPincel = yPincel + 1;
					else yPincel = yPincel - 1;
					acc = acc + rel;
					if(acc>=1){
						if(positivoX){
							xPincel = xPincel + 1;
							acc = acc - 1;
						}
						else{
							xPincel = xPincel - 1;
							acc = acc - 1;
						}
					}
				}
				if(mapaMascara.getPixel((int)xPincel, (int)yPincel) != Color.WHITE){
					flag = true;
				}
			}
		}
		if(flag) return 0;
		else return 1;		
!!!174082.java!!!	setParticulas(inout particulas : ArrayList<Particle>) : void
		this.particulas = particulas;
!!!174210.java!!!	getParticulas() : Particle
		return particulas;
