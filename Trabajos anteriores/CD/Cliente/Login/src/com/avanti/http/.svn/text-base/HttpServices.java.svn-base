package com.avanti.http;

import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;

import javax.xml.parsers.FactoryConfigurationError;

import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;

public class HttpServices {
	
	public static String host = "80.33.213.133";
	public static int port = 10000;
	public static String urlServer = "http://80.33.213.133:10000/avanti/";
	
    public HttpServices(){
    	
	}
    
    public boolean ping() throws UnknownHostException, IOException, SecurityException {
    	Socket t = new Socket(host,port);            
        t.close();
        return true;
    	
    }
    
    /**
     * Método que logea a un usuario en el sistema
     * @param user
     * @param password
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     */
    public String login(String user, String password) throws ClientProtocolException, IOException{
    	if(ping()){
	    	DefaultHttpClient httpclient = new DefaultHttpClient();
	    	//TODO
	        HttpGet httpget = new HttpGet(urlServer + "consultar.php?username=" + user + "&password=" + password /*+ "&time" + System.currentTimeMillis()*/);
		    BasicResponseHandler aux = new BasicResponseHandler();    
		    String response = httpclient.execute(httpget,aux);
		    httpclient.getConnectionManager().shutdown();     
		    if(response.equals("SI")){
		    	return "";
		    }else{
		    	return "Usuario no registrado";
		    }
    	}else{
    		return "Servidor inaccesible";
    	}
    	//return "";
	        	        
    }
    
    public String logout(String user, String password) throws ClientProtocolException, IOException{
    	if(ping()){
	    	DefaultHttpClient httpclient = new DefaultHttpClient();
	        HttpGet httpget = new HttpGet(urlServer + "logout.php?username=" + user + "&password=" + password);
		    BasicResponseHandler aux = new BasicResponseHandler();    
		    String response = httpclient.execute(httpget,aux);
		    httpclient.getConnectionManager().shutdown();     
		    if(response.equals("SI")){
		    	return "";
		    }else{
		    	return "No se ha podido salir correctamente de la aplicación";
		    }
    	}else{
    		return "Servidor inaccesible";
    	}
	        	        
    }
    
    /**
     * Método que registra a un usuario en el sistema
     * @param user
     * @param password
     * @param name
     * @param surname
     * @return <code>"CORRECTO"</code> si lo consigue, <code>"ERROR"</code> en caso de error e información
     * de la excepción en otro caso 
     * @throws ClientProtocolException
     * @throws IOException
     */
    public String register(String user, String password, String name, String surname) throws ClientProtocolException, IOException{
    	if(ping()){
	    	DefaultHttpClient httpclient = new DefaultHttpClient();
	        HttpGet httpget = new HttpGet(urlServer + "registrar.php?username=" + user + "&password=" + password + "&nombre=" + name + "&apellidos="+ surname);
		    BasicResponseHandler aux = new BasicResponseHandler();    
		    String response = httpclient.execute(httpget,aux);
		    httpclient.getConnectionManager().shutdown();     
		    return response;
    	}else{
    		return "Servidor inaccesible";
    	}
    }
    
    /**
     * Método que inserta unos datos para unas coordenadas en la Base de Datos
     * @param x
     * @param y
     * @param z
     * @param mac
     * @param strength
     * @param sobreescribir
     * @return "" si tiene éxito, la información del error en caso de fallo.
     * @throws ClientProtocolException
     * @throws IOException
     */
    public String insertCoorDatabase(double x, double y, double z, String mac, int strength) throws ClientProtocolException, IOException{
    	if(ping()){
	    	DefaultHttpClient httpclient = new DefaultHttpClient();
	    	String url = urlServer + "insertNewPosition.php?mac=" + mac + "&x=" + x + "&y=" + y + "&z="+ z + "&strength=" + strength;
	        HttpGet httpget = new HttpGet(url);
		    BasicResponseHandler aux = new BasicResponseHandler();    
		    String response = httpclient.execute(httpget,aux);
		    httpclient.getConnectionManager().shutdown();
		    if(response.equals("OK")){
		    	return "";
		    }else{
		    	return response;
		    }
    	}else{
    		return "Servidor inaccesible";
    	}
    }
    
    /**
     * Recupera todas las coordenadas almacenadas en la BD
     * @return
     * @throws HttpServicesException
     */
    public JSONArray getCoordenadas() throws HttpServicesException{
    	try {
			if(ping()){
				DefaultHttpClient httpclient = new DefaultHttpClient();
		    	String url =urlServer + "getAllPositions.php";
		        HttpGet httpget = new HttpGet(url);		        
			    BasicResponseHandler aux = new BasicResponseHandler();
			    String response = httpclient.execute(httpget,aux);
			    httpclient.getConnectionManager().shutdown();
			    JSONArray datos = new JSONArray(response);
			    return datos;
			}else{
				throw new HttpServicesException("Host de destino inaccesible.");
			}
		} catch (UnknownHostException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		} catch (SecurityException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		} catch (IOException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		} catch (FactoryConfigurationError e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		} catch (JSONException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		}
    }
    
    public JSONArray getFires() throws HttpServicesException{
    	try{
    		if (ping()){
    			String url = urlServer + "getAllFires.php";
    			DefaultHttpClient httpClient = new DefaultHttpClient();
    			HttpGet http = new HttpGet(url);
    			BasicResponseHandler handler = new BasicResponseHandler();
    			String response = httpClient.execute(http,handler);
    			httpClient.getConnectionManager().shutdown();
    			JSONArray fuegos = new JSONArray(response);
    			return fuegos;
    		}
    		else{
    			throw new HttpServicesException("Host de destino inaccesible.");
    		}
    		
    	}
    	catch(UnknownHostException e){
    		e.printStackTrace();
    		throw new HttpServicesException(e.getMessage());
    	}
    	catch(SecurityException e){
    		e.printStackTrace();
    		throw new HttpServicesException(e.getMessage());
    	}
    	catch (FactoryConfigurationError e) {
 			e.printStackTrace();
 			throw new HttpServicesException(e.getMessage());
 		}
    	catch (ClientProtocolException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		}
    	catch (IOException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		}
    	catch (JSONException e) {
			e.printStackTrace();
			throw new HttpServicesException(e.getMessage());
		}
    }
}
