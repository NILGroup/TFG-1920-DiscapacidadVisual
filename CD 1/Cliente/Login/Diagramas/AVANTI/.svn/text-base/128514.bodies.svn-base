class GLSurfaceViewActivity
!!!128130.java!!!	onCreate(inout savedInstanceState : Bundle) : void
    	MainMenu.activeActivity = this;
    	requestWindowFeature(Window.FEATURE_NO_TITLE); 
 	   	getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN); 
        super.onCreate(savedInstanceState);
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);
        int width = dm.widthPixels;
        int height = dm.heightPixels;
        
        
        // Create our Preview view and set it as the content of our
        // Activity
        mPreview = new Preview(this);
        
        cube = new CubeRenderer(true);
        
        CompassRenderer compassRenderer = new CompassRenderer(); 
        
        AssetManager aMgr = getResources().getAssets();
        flames = new FlameRenderer(aMgr, width, height);
        
        
    
        mGLSurfaceView = new GLSurfaceView(this);
        
        // We want an 8888 pixel format because that's required for
        // a translucent window.
        // And we want a depth buffer.
        mGLSurfaceView.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
        
        
        
        // Tell the cube renderer that we want to render a translucent version
        // of the cube:

        //mGLSurfaceView.setRenderer(cube);
        //mGLSurfaceView.setRenderer(compassRenderer);
        mGLSurfaceView.setRenderer(flames);
      
       
        
        // Use a surface format with an Alpha channel:
        mGLSurfaceView.getHolder().setFormat(PixelFormat.TRANSLUCENT);
        setContentView(mGLSurfaceView);

       
        addContentView(mPreview, new LayoutParams
  			  (LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        
        mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
        
        mPreview.setClickable(true);
        mPreview.setOnTouchListener(new OnTouchListener(){

        	float xTouch = 0;
			float yTouch = 0;
			float x = 0;
			float y = 0;
			
			public boolean onTouch(View arg0, MotionEvent arg1) {
				// TODO Auto-generated method stub
				int action = arg1.getAction();
				switch(action){
					case MotionEvent.ACTION_MOVE:
						x = arg1.getX();
						y = arg1.getY();
						flames.setPosition(x,y);
						flames.setScreenTouch(true);
						break;
				}
				return false;
			}
        	
        });
     

!!!128258.java!!!	onResume() : void
        // Ideally a game should implement onResume() and onPause()
        // to take appropriate action when the activity looses focus
        super.onResume();
        mGLSurfaceView.onResume();
        mSensorManager.registerListener(sensorListener, 
      		  SensorManager.SENSOR_ORIENTATION,
                SensorManager.SENSOR_DELAY_FASTEST);
        
!!!128386.java!!!	onPause() : void
        // Ideally a game should implement onResume() and onPause()
        // to take appropriate action when the activity looses focus
        super.onPause();
        mGLSurfaceView.onPause();
!!!128514.java!!!	onCreateOptionsMenu(inout menu : Menu) : boolean
		menu.add(0, MainMenu.MENU_QUIT,0,"Salir").setIcon(android.R.drawable.star_off);
		return true;
!!!128642.java!!!	onMenuItemSelected(in featureId : int, inout item : MenuItem) : boolean
		//super.onMenuItemSelected(featureId, item);
		switch (item.getItemId()) {
		case MainMenu.MENU_QUIT:
		    finish();
		    return true;
		}
		  return true;
!!!128770.java!!!	f_salir() : void
        setResult(RESULT_OK);
        finish();
!!!128898.java!!!	getGLSurfaceViewActivity() : GLSurfaceViewActivity
    	return this;
!!!129026.java!!!	getFlames() : FlameRenderer
    	return flames;
